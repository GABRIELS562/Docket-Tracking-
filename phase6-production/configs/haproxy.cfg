# HAProxy Configuration for RFID Docket Tracking System
# High Availability Load Balancer with SSL Termination

global
    daemon
    maxconn 4096
    log stdout local0
    stats socket /var/run/haproxy.sock mode 660 level admin
    stats timeout 30s
    user haproxy
    group haproxy

defaults
    mode http
    log global
    option httplog
    option dontlognull
    option http-server-close
    option forwardfor except 127.0.0.0/8
    option redispatch
    retries 3
    timeout connect 5000ms
    timeout client 50000ms
    timeout server 50000ms
    timeout http-request 15s
    timeout http-keep-alive 15s
    errorfile 400 /usr/local/etc/haproxy/errors/400.http
    errorfile 403 /usr/local/etc/haproxy/errors/403.http
    errorfile 408 /usr/local/etc/haproxy/errors/408.http
    errorfile 500 /usr/local/etc/haproxy/errors/500.http
    errorfile 502 /usr/local/etc/haproxy/errors/502.http
    errorfile 503 /usr/local/etc/haproxy/errors/503.http
    errorfile 504 /usr/local/etc/haproxy/errors/504.http

# Frontend - Main Entry Point
frontend rfid_frontend
    bind *:80
    bind *:443 ssl crt /etc/ssl/certs/rfid-docket.pem
    
    # Security Headers
    http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains"
    http-response set-header X-Frame-Options "DENY"
    http-response set-header X-Content-Type-Options "nosniff"
    http-response set-header X-XSS-Protection "1; mode=block"
    http-response set-header Referrer-Policy "strict-origin-when-cross-origin"
    
    # Redirect HTTP to HTTPS
    redirect scheme https code 301 if !{ ssl_fc }
    
    # Rate Limiting by IP
    stick-table type ip size 100k expire 30s store http_req_rate(10s),http_err_rate(10s)
    http-request track-sc0 src
    http-request deny if { sc_http_req_rate(0) gt 100 }
    http-request deny if { sc_http_err_rate(0) gt 10 }
    
    # API Routes
    use_backend api_servers if { path_beg /api/ }
    
    # Health Check
    use_backend api_servers if { path /health }
    
    # Frontend Routes (React App)
    default_backend frontend_servers

# Backend - API Servers
backend api_servers
    balance roundrobin
    option httpchk GET /health
    http-check expect status 200
    
    # Enable session stickiness for WebSocket connections
    cookie SERVERID insert indirect nocache
    
    # API Server instances
    server api1 api-server:3000 check cookie api1 maxconn 500
    server api2 api-server:3000 check cookie api2 maxconn 500
    
    # Health check interval
    option httpchk GET /health HTTP/1.1\r\nHost:\ localhost

# Backend - Frontend Servers (Static files)
backend frontend_servers
    balance roundrobin
    option httpchk GET /
    
    # Serve static files with caching
    http-response set-header Cache-Control "public, max-age=86400" if { path_end .js .css .png .jpg .ico .woff .woff2 }
    
    # Frontend server (nginx or similar)
    server frontend1 127.0.0.1:3002 check

# Statistics Interface
listen stats
    bind *:8404
    stats enable
    stats uri /stats
    stats refresh 30s
    stats admin if TRUE
    stats auth admin:${HAPROXY_STATS_PASSWORD:-StatsPass2025!}
    
    # Performance metrics
    stats show-desc "RFID Docket Tracking System - Load Balancer Statistics"
    stats show-legends
    stats show-node

# Database Load Balancing (Read/Write Split)
frontend db_frontend
    bind *:5432
    mode tcp
    default_backend db_write

backend db_write
    mode tcp
    balance source
    server postgres-master postgres-master:5432 check

backend db_read
    mode tcp
    balance roundrobin
    server postgres-master postgres-master:5432 check weight 100
    server postgres-replica postgres-replica:5432 check weight 200 backup

# Redis Load Balancing
frontend redis_frontend
    bind *:6379
    mode tcp
    default_backend redis_servers

backend redis_servers
    mode tcp
    balance source
    server redis-master redis-master:6379 check
    server redis-replica redis-replica:6379 check backup