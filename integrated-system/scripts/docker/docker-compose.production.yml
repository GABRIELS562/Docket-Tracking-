version: '3.8'

services:
  # Database
  postgres:
    image: postgres:15
    container_name: docket-tracking-db
    environment:
      POSTGRES_DB: docket_tracking_prod
      POSTGRES_USER: docket_user
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    command: >
      postgres 
      -c shared_buffers=256MB
      -c effective_cache_size=1GB
      -c maintenance_work_mem=64MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c min_wal_size=1GB
      -c max_wal_size=4GB
      -c max_connections=200
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U docket_user -d docket_tracking_prod"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - docket-network

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: docket-tracking-redis
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - docket-network

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
      target: production
    container_name: docket-tracking-api
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      SENDGRID_API_KEY: ${SENDGRID_API_KEY}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    networks:
      - docket-network

  # Frontend Server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
      target: production
    container_name: docket-tracking-frontend
    environment:
      NODE_ENV: production
      REACT_APP_API_URL: http://api:3001
    ports:
      - "3000:3000"
    depends_on:
      - api
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    networks:
      - docket-network

  # Background Worker
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
      target: production
    container_name: docket-tracking-worker
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      REDIS_HOST: redis
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - uploads_data:/app/uploads
      - logs_data:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    networks:
      - docket-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: docket-tracking-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/ssl/certs:ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - api
      - frontend
    restart: unless-stopped
    networks:
      - docket-network

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: docket-tracking-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    networks:
      - docket-network

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: docket-tracking-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3003:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - docket-network

  # Log Aggregation - Elasticsearch
  elasticsearch:
    image: elasticsearch:8.5.0
    container_name: docket-tracking-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped
    networks:
      - docket-network

  # Log Aggregation - Logstash
  logstash:
    image: logstash:8.5.0
    container_name: docket-tracking-logstash
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - logs_data:/logs:ro
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - docket-network

  # Log Visualization - Kibana
  kibana:
    image: kibana:8.5.0
    container_name: docket-tracking-kibana
    environment:
      ELASTICSEARCH_HOSTS: http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped
    networks:
      - docket-network

  # Backup Service
  backup:
    build:
      context: ./scripts/backup
      dockerfile: Dockerfile
    container_name: docket-tracking-backup
    environment:
      DB_HOST: postgres
      DB_PASSWORD: ${DB_PASSWORD}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      S3_BUCKET: ${BACKUP_S3_BUCKET}
    volumes:
      - postgres_data:/backup/postgres:ro
      - uploads_data:/backup/uploads:ro
      - backup_data:/backup/local
    depends_on:
      - postgres
    restart: unless-stopped
    networks:
      - docket-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  uploads_data:
    driver: local
  logs_data:
    driver: local
  nginx_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  backup_data:
    driver: local

networks:
  docket-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16